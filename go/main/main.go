package main

import (
	"binaryRewriter/opcodes"
	"encoding/hex"
	"fmt"
	"math"
	"strconv"
)

func dasm_printer(hexStr string) {
	var index int = 0

	for index < len(hexStr) {

		var hexStrToken string = ""
		hexStrToken = hexStr[index : index+2]                     // string Type hexToken
		hexToken ,_:= hex.DecodeString(hexStrToken)               // string to byte
		opCodeToken := opcodes.OpCode(hexToken[0])                // byte to OpCode(struct)
		var operator string = opcodes.String(opCodeToken) // operator

		switch {
		case opcodes.IsPush(opCodeToken): // operator is Push
			var numOfOperand int = 0
			numOfOperand = int(opCodeToken - 0x5f)
			var operand string = "0x" + hexStr[index+2:index+2+(2*numOfOperand)] // operand

			fmt.Print(operator + " ")
			fmt.Println(operand)
			index += 2 + (2 * numOfOperand)

		case len(opcodes.String(opCodeToken)) == 0:
			fmt.Printf("0x%x \n",hexToken)
			index += 2

		default:
			fmt.Println(operator + " ")
			index += 2

		}

	}


}
func numOfOperand (hexToken string) int{
	intHexToken , _ := strconv.ParseUint(hexToken,16,64)
	return int(intHexToken) - 0x5f
}

func getOperand (index int,hexStr string,hexToken string) string{
	return hexStr[index+2 : (index+2)+2*numOfOperand(hexToken)]
}

func isOverWritable(keepRewrite bool,hexToken string,index int ,hexStr string) bool{
	return keepRewrite && numOfOperand(hexToken) ==2 && isNextOpJumpI (index,hexStr)
}

func isNextOpJumpI(index int,hexStr string) bool{
	nextIndex := index +6
	var nextOpToken string = hexStr[nextIndex:nextIndex+2]
	return nextOpToken == "57"
}


func getRewriteOperandJumpI(hexStr string) string{
	lastAddress := int(math.Round(float64(len(hexStr)) / 2))
	stringAddress := fmt.Sprintf("%x",lastAddress)


	if len(stringAddress) % 2 ==0{
	}else{
		stringAddress = "0" + stringAddress
	}
	return stringAddress
}

func voidTrail (index int ,hexStr string) string{
	return hexStr[index:len(hexStr)]
}

func binRewrite(hexStr string) string {


	var reWritedStr string = ""
	var index int = 0

	var keepRewrite bool = true
	var fallbackOperand string = ""
	var hexToken string = ""


	for  hexToken !="00" {
		hexToken = hexStr[index : index+2]
		decodedHexToken, _ := hex.DecodeString(hexToken)
			opcode := opcodes.OpCode(decodedHexToken[0])



			if opcodes.IsPush(opcode) {
				operand := getOperand(index, hexStr, hexToken)
				var rewriteOperand string = operand
				if isOverWritable(keepRewrite, hexToken, index, hexStr) {
					fallbackOperand = operand
					rewriteOperand = getRewriteOperandJumpI(hexStr)
					keepRewrite = false
				}
				index = (index + 2) + 2*numOfOperand(hexToken)
				reWritedStr += hexToken + rewriteOperand
			} else {
				reWritedStr += hexToken
				index += 2
			}
	}
	if fallbackOperand !=""{
		reWritedStr = reWritedStr + voidTrail(index, hexStr) + fmt.Sprintf("%x",opcodes.JUMPDEST) + fmt.Sprintf("%x",opcodes.PUSH2) +fallbackOperand+ fmt.Sprintf("%x",opcodes.JUMPI)
	}else{
		reWritedStr = reWritedStr + voidTrail(index, hexStr)
	}
	return reWritedStr
}
func main() {
	hexStr := "608060405234801561001057600080fd5b50600436106100885760003560e01c8063609ff1bd1161005b578063609ff1bd146101925780639e7b8d61146101b0578063a3ec138d146101f4578063e2ba53f01461029157610088565b80630121b93f1461008d578063013cf08b146100bb5780632e4176cf146101045780635c19a95c1461014e575b600080fd5b6100b9600480360360208110156100a357600080fd5b81019080803590602001909291905050506102af565b005b6100e7600480360360208110156100d157600080fd5b810190808035906020019092919050505061044c565b604051808381526020018281526020019250505060405180910390f35b61010c61047d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101906004803603602081101561016457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104a2565b005b61019a6108be565b6040518082815260200191505060405180910390f35b6101f2600480360360208110156101c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610935565b005b6102366004803603602081101561020a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b36565b60405180858152602001841515151581526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b610299610b93565b6040518082815260200191505060405180910390f35b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561036d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f486173206e6f20726967687420746f20766f746500000000000000000000000081525060200191505060405180910390fd5b8060010160009054906101000a900460ff16156103f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f416c726561647920766f7465642e00000000000000000000000000000000000081525060200191505060405180910390fd5b60018160010160006101000a81548160ff02191690831515021790555081816002018190555080600001546002838154811061042a57fe5b9060005260206000209060020201600101600082825401925050819055505050565b6002818154811061045957fe5b90600052602060002090600202016000915090508060000154908060010154905082565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff161561056a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f596f7520616c726561647920766f7465642e000000000000000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561060c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e000081525060200191505060405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107af57600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f466f756e64206c6f6f7020696e2064656c65676174696f6e2e0000000000000081525060200191505060405180910390fd5b61060d565b60018160010160006101000a81548160ff021916908315150217905550818160010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156108a2578160000154600282600201548154811061087f57fe5b9060005260206000209060020201600101600082825401925050819055506108b9565b816000015481600001600082825401925050819055505b505050565b6000806000905060008090505b6002805490508110156109305781600282815481106108e657fe5b9060005260206000209060020201600101541115610923576002818154811061090b57fe5b90600052602060002090600202016001015491508092505b80806001019150506108cb565b505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109da576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610bc16028913960400191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610a9d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f54686520766f74657220616c726561647920766f7465642e000000000000000081525060200191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610aec57600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60006002610b9f6108be565b81548110610ba957fe5b90600052602060002090600202016000015490509056fe4f6e6c79206368616972706572736f6e2063616e206769766520726967687420746f20766f74652ea264697066735822122051a84c5d8600cb26280757530ed57ac14fcad0811982d0bb5cb0bcf5e947771a64736f6c63430006060033"
	result := binRewrite(hexStr)
	fmt.Println(result)
	dasm_printer(hexStr)
}
